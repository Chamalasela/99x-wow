"use strict";(self.webpackChunk_99_x_wow_local_git=self.webpackChunk_99_x_wow_local_git||[]).push([[1796],{8414:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=t(4848),o=t(8453);const s={title:"Delivery Pipeline",metaTitle:"Delivery Pipeline | WP",metaDescription:"Helps you automate steps in your software delivery process, such as initiating code builds, static code analysis, running automated tests, and deploying to a staging or production environment.",published:!0,documentation:"TechArchitecture",metaTags:["Plan","Delivery Pipeline","Winning Product","Customer Success"],checklist:[{order:1,question:"Have you setup key steps of the CI pipeline?",expectation:"Ability to demonstrate CI configuration and execute CI job successfully having tasks such as, code quality analysis, unit test execution, security tests",version:"1.0.0"},{order:2,question:"Have you setup key steps of the CD pipeline?",expectation:"Ability to demonstrate the key stages of the delivery such as executing infrastructure code, execute code to configure infrastructure, prmote artefacts across different stages of the pipeline, have different nonfunctional automated tests harnesses.",version:"1.0.0"},{order:3,question:"Have you identified release methods different to deployment techniques?",expectation:"Ability to decouple deployments from releases",version:"1.0.0"}]},r=void 0,a={id:"product-experience/winning-product/content/plan/delivery-pipeline",title:"Delivery Pipeline",description:"Why",source:"@site/docs/product-experience/winning-product/content/4-plan/04-delivery-pipeline.md",sourceDirName:"product-experience/winning-product/content/4-plan",slug:"/product-experience/winning-product/content/plan/delivery-pipeline",permalink:"/99x-wow/docs/product-experience/winning-product/content/plan/delivery-pipeline",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Delivery Pipeline",metaTitle:"Delivery Pipeline | WP",metaDescription:"Helps you automate steps in your software delivery process, such as initiating code builds, static code analysis, running automated tests, and deploying to a staging or production environment.",published:!0,documentation:"TechArchitecture",metaTags:["Plan","Delivery Pipeline","Winning Product","Customer Success"],checklist:[{order:1,question:"Have you setup key steps of the CI pipeline?",expectation:"Ability to demonstrate CI configuration and execute CI job successfully having tasks such as, code quality analysis, unit test execution, security tests",version:"1.0.0"},{order:2,question:"Have you setup key steps of the CD pipeline?",expectation:"Ability to demonstrate the key stages of the delivery such as executing infrastructure code, execute code to configure infrastructure, prmote artefacts across different stages of the pipeline, have different nonfunctional automated tests harnesses.",version:"1.0.0"},{order:3,question:"Have you identified release methods different to deployment techniques?",expectation:"Ability to decouple deployments from releases",version:"1.0.0"}]},sidebar:"tutorialSidebar",previous:{title:"Architecture Blueprint",permalink:"/99x-wow/docs/product-experience/winning-product/content/plan/architecture-blueprint"},next:{title:"Detailed Data Schema",permalink:"/99x-wow/docs/product-experience/winning-product/content/plan/detailed-data-schema"}},l={},c=[{value:"Why",id:"why",level:2},{value:"How",id:"how",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"why",children:"Why"}),"\n",(0,i.jsx)(n.p,{children:"CI/CD (Continuous Integration/Continuous Deployment) implementation allows a fast flow of work from your development to production while ensuring the quality of all development changes. With a good DevOps pipeline, you can make sure that your automated tests are run with each build. This makes it easier to catch bugs earlier in the development life cycle. It also automates the deployment of infrastructure such as Databases, Storage Queues, Web Servers, etc. making little room for human errors. With all this, a CI/CD pipeline ultimately allows you greater confidence in product development that\u2019s critical for a fast flow of work."}),"\n",(0,i.jsx)(n.h2,{id:"how",children:"How"}),"\n",(0,i.jsx)(n.p,{children:"Modern cloud service providers have numerous tools and techniques available for you to setup a good DevOps pipeline. It\u2019s usually a matter of doing the right configurations to achieve the desired outcome. However, when setting it up, all aspects of the delivery pipeline should be considered. The flow of a delivery pipeline is twofold."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Continuous Integration (CI):"})," - should include the following steps and characteristics:"]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CI must be triggered by the changes to the code base. This can be changes merging to the trunk (in Trunk Based Development) or to any branch."}),"\n",(0,i.jsx)(n.li,{children:"Build the entire code base to check for compilation errors."}),"\n",(0,i.jsx)(n.li,{children:"Run the unit tests to ensure existing/new functionality is not broken."}),"\n",(0,i.jsx)(n.li,{children:"Include Static Code analysis to check the quality of the code and prevent new tech debt from being accumulated."}),"\n",(0,i.jsx)(n.li,{children:"Run SAST tools to ensure that there isn\u2019t any security vulnerablity introduced to the code base."}),"\n",(0,i.jsx)(n.li,{children:"Run tests/validation on the Infrastructure Code (if any)"}),"\n",(0,i.jsx)(n.li,{children:"Run tests/validation on the Configuration Code (if any)"}),"\n",(0,i.jsx)(n.li,{children:"Generate/Publish code metrics and test results"}),"\n",(0,i.jsx)(n.li,{children:"Generate/Publish artifacts that\u2019s needed for Continuous Delivery/Deployment."}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Continuous Delivery/Deployment"})}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Run the Infrastructure Code to create/update Application Infrastructure (if any)"}),"\n",(0,i.jsx)(n.li,{children:"Run the Configuration Code to configure the infrastructure to the desired state (if any)"}),"\n",(0,i.jsx)(n.li,{children:"Deploy the artifacts on top of provisioned and configured environment"}),"\n",(0,i.jsx)(n.li,{children:"Run the automated e2e tests on the deployed application"}),"\n",(0,i.jsx)(n.li,{children:"Run DAST Suite on the deployed application"}),"\n",(0,i.jsx)(n.li,{children:"Run Performance tests on the deployed application"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Also consider the following best practices when setting up a delivery pipeline:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use a good branching strategy for your development. Trunk-Based Development is recommended."}),"\n",(0,i.jsx)(n.li,{children:"Use Infrastructure as Code and Configuration as Code practices in your application development to avoid infrastructure and configuration drift."}),"\n",(0,i.jsx)(n.li,{children:"Include Static Code Analysis, SAST (Static Application Security Tests), Unit test results and coverage in the CI pipeline."}),"\n",(0,i.jsx)(n.li,{children:"Validate infrastructure code and configuration code in the CI pipeline."}),"\n",(0,i.jsx)(n.li,{children:"Follow the \u201cBuild Once, Deploy Many\u201d principle."}),"\n",(0,i.jsx)(n.li,{children:"Only promote the deployment to the next environment after validating the current environment using automated tests, telemetry from the environments etc."}),"\n",(0,i.jsx)(n.li,{children:"Implement continuous testing."}),"\n",(0,i.jsx)(n.li,{children:"Decouple deployment from the release."}),"\n",(0,i.jsx)(n.li,{children:"Perform parallel test execution."}),"\n",(0,i.jsx)(n.li,{children:"Perform artifact versioning."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"An ideal delivery pipeline would be something similar to the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DEV Local environment:"})," This is the environment used to write code and unit test it"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integration testing environment (optional):"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Code could be automatically deployed to this environment once it has been unit tested and the pull request has been approved. This environment could be used to run tests once work related to different modules has been integrated"}),"\n",(0,i.jsx)(n.li,{children:"Integration tests would be run in this environment"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Staging environment:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Once unit testing has been performed in the DEV local environment or integration testing has been performed in the Integration testing environment, features/bug fixes could be pipelined into the staging environment."}),"\n",(0,i.jsx)(n.li,{children:"Regression testing should take place in this environment"}),"\n",(0,i.jsx)(n.li,{children:"The staging environment should be similar to the production environment to ensure correctness of test results. That would mean having to mirror: the same set of systems and services as production, network endpoints and databases having the same configurations and schemas as production, same load balancers as in production, same monitoring tools used in production"}),"\n",(0,i.jsx)(n.li,{children:"The right test data should be available in this environment and it should mimic real users. If Data anonymization is performed on production data to be used in the staging environment, the data must preserve the original data types and formats (e.g. any field mandating alphanumeric characters, data range and number of characters should be substituted with other alphanumeric characters within the set data range and follow the limit of number of characters) , preserve the consistency of primary key values , preserve referential integrity, considering up and down stream data flows"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Production environment:"})," Features/bug fixes could be migrated to production once they have passed the relevant validation tests in the staging environment."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Also, consider researching the following deployment techniques"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Blue-Green Deployments:"})," The technique of having two identical production environments with one serving as live and the other serving as a backup."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Canary Deployments:"})," Rolling out releases to a subset of users at a time."]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Zero-Downtime Deployments"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dogfooding:"})," Trying the product in house first before rolling it out."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Feature Toggles:"})," Have facilities to enable and disable certain features to certain users without changing the code."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://semaphoreci.com/blog/cicd-pipeline",children:"CI/CD Pipeline: A Gentle Introduction"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Continuous_integration",children:"Continuous Integration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Continuous_delivery",children:"Continuous Delivery"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);